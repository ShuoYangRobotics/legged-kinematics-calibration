//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: autoFunc_d_fk_dt.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 08-Feb-2022 22:07:28
//

// Include Files
#include "autoFunc_d_fk_dt.h"
#include <cmath>

// Function Definitions
//
// AUTOFUNC_D_FK_DT
//     JACOBIAN = AUTOFUNC_D_FK_DT(IN1,LC,IN3)
//
// Arguments    : const double in1[3]
//                double lc
//                const double in3[4]
//                double jacobian[9]
// Return Type  : void
//
void autoFunc_d_fk_dt(const double in1[3], double lc, const double in3[4],
                      double jacobian[9])
{
  double jacobian_tmp;
  double t10;
  double t11;
  double t16;
  double t18;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     08-Feb-2022 22:07:24
  t5 = std::cos(in1[0]);
  t6 = std::cos(in1[1]);
  t7 = std::cos(in1[2]);
  t8 = std::sin(in1[0]);
  t9 = std::sin(in1[1]);
  t10 = std::sin(in1[2]);
  t11 = in1[1] + in1[2];
  t16 = lc * std::sin(t11);
  t11 = -(lc * std::cos(t11));
  t18 = in3[3] * t9 + t16;
  jacobian[0] = 0.0;
  jacobian_tmp = lc * t5;
  jacobian[1] = ((-in3[2] * t8 + in3[3] * t5 * t6) + jacobian_tmp * t6 * t7) -
                jacobian_tmp * t9 * t10;
  jacobian_tmp = in3[3] * t6;
  jacobian[2] = ((in3[2] * t5 + jacobian_tmp * t8) + lc * t6 * t7 * t8) -
                lc * t8 * t9 * t10;
  jacobian[3] = t11 - jacobian_tmp;
  jacobian[4] = -t8 * t18;
  jacobian[5] = t5 * t18;
  jacobian[6] = t11;
  jacobian[7] = -t8 * t16;
  jacobian[8] = t5 * t16;
}

//
// File trailer for autoFunc_d_fk_dt.cpp
//
// [EOF]
//
